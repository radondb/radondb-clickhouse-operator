{{- $zkreplicas := int .Values.zookeeper.replicas -}}
{{- $args := list -}}
{{- $name :=  .Release.Name -}}
{{- $namespace := .Release.Namespace -}}
---
apiVersion: "clickhouse.radondb.com/v1"
kind: "ClickHouseInstallation"
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
spec:
  configuration:
    zookeeper:
      {{- if .Values.zookeeper.install }}
      install: true
      replica: {{ .Values.zookeeper.replicas }}
      {{- else }}
      nodes:
        {{- range untilStep 0 $zkreplicas 1 -}}
          {{ $args = printf "%s-%s-%d" "zk" $name . }}
          - host: {{ $args }}.zk-server-{{ $name }}.{{ $namespace }}
            port: 2181
        {{- end }}
      {{- end }}
    users:
      #     <users>
      #        <test>
      #          <networks>
      #            <ip>127.0.0.1</ip>
      #            <ip>::/0</ip>
      #          </networks>
      #        </test>
      #     </users>
      {{- range .Values.clickhouse.user }}
      {{ .username }}/password: {{ .password }}
      {{ .username }}/networks/ip:
        {{- range $ipIndex, $ip := .networks }}
          - {{ $ip }}
        {{- end }}
      {{ .username }}/profile: default
      {{ .username }}/quotas: default
      {{- end }}
    profiles:
      #      <profiles>
      #        <readonly>
      #          <readonly>1</readonly>
      #        </readonly>
      #      </profiles>
    quotas:
      default/interval/duration: "3600"
      #     <quotas>
      #       <default>
      #         <interval>
      #           <duration>3600</duration>
      #         </interval>
      #       </default>
      #     </quotas>
    settings:
      compression/case/method: zstd
      #      <compression>
      #        <case>
      #          <method>zstd</method>
      #        </case>
      #      </compression>
      disable_internal_dns_cache: 1
      #      <disable_internal_dns_cache>1</disable_internal_dns_cache>
    clusters:
      - name: {{ .Values.clickhouse.clusterName }}
        layout:
          shardsCount: {{ .Values.clickhouse.shardscount }}
          replicasCount: {{ .Values.clickhouse.replicascount }}

  defaults:
    templates:
      podTemplate: clickhouse-pod
      serviceTemplate: clickhouse-svc
      dataVolumeClaimTemplate: clickhouse-data
      zookeeperPodTemplate: zookeeper-pod
      zookeeperServiceTemplate: zookeeper-svc
      zookeeperVolumeClaimTemplate: zookeeper-data

  templates:
    serviceTemplates:
      - name: clickhouse-svc
        spec:
          type: {{ .Values.clickhouse.svc.type }}
          ports:
            - name: tcp
              port: {{ .Values.clickhouse.ports.tcp }}
            - name: http
              port: {{ .Values.clickhouse.ports.http }}
      - name: zookeeper-svc
        spec:
          type: {{ .Values.zookeeper.svc.type }}
          ports:
            - name: client
              port: {{ .Values.zookeeper.ports.client }}
            - name: server
              port: {{ .Values.zookeeper.ports.server }}
            - name: leader-election
              port: {{ .Values.zookeeper.ports.election }}

    volumeClaimTemplates:
      - name: clickhouse-data
        reclaimPolicy: {{ .Values.clickhouse.storage.reclaimPolicy }}
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: {{ .Values.clickhouse.storage.capacity }}
          storageClassName: {{ .Values.clickhouse.storage.storageClassName }}
      - name: zookeeper-data
        reclaimPolicy: {{ .Values.zookeeper.storage.reclaimPolicy }}
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: {{ .Values.zookeeper.storage.capacity }}
          storageClassName: {{ .Values.zookeeper.storage.storageClassName }}

    podTemplates:
      - name: clickhouse-pod
        spec:
          affinity:
            # Locate only one pod on each host
            podAntiAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
                - weight: 1
                  podAffinityTerm:
                    labelSelector:
                      matchExpressions:
                        - key: "clickhouse.radondb.com/chi"
                          operator: In
                          values:
                          - {{ .Release.Name }}
                    topologyKey: "kubernetes.io/hostname"
          containers:
            - name: clickhouse
              image: {{ .Values.clickhouse.image }}
              imagePullPolicy: {{ .Values.clickhouse.imagePullPolicy }}
              volumeMounts:
                - name: clickhouse-data
                  mountPath: /var/lib/clickhouse
              resources:
                requests:
                  cpu: {{ .Values.clickhouse.resources.cpu }}
                  memory: {{ .Values.clickhouse.resources.memory }}
                limits:
                  cpu: {{ .Values.clickhouse.resources.cpu }}
                  memory: {{ .Values.clickhouse.resources.memory }}
              ports:
                - name: tcp
                  containerPort: {{ .Values.clickhouse.ports.tcp }}
                - name: http
                  containerPort: {{ .Values.clickhouse.ports.http }}
            - name: clickhouse-log
              image: {{ .Values.busybox.image }}
              imagePullPolicy: {{ .Values.busybox.imagePullPolicy }}
              volumeMounts:
                - name: clickhouse-data
                  mountPath: /var/lib/clickhouse
              command:
                - /bin/sh
                - '-c'
                - '--'
              args:
                - while true; do sleep 30; done;
            {{- if .Values.backup.enable }}
            - name: clickhouse-backup
              image: {{ .Values.backup.image }}
              imagePullPolicy: {{ .Values.backup.imagePullPolicy }}
              volumeMounts:
                - name: clickhouse-data
                  mountPath: /var/lib/clickhouse
              ports:
                - name: backup-rest
                  containerPort: 7171
              command:
                - bash
                - -xc
                - "/bin/clickhouse-backup server"
              env:
                - name: API_LISTEN
                  value: "0.0.0.0:7171"
                # INSERT INTO system.backup_actions to execute backup
                - name: API_CREATE_INTEGRATION_TABLES
                  value: "true"

                - name: LOG_LEVEL
                  value: "debug"
                - name: MAX_FILE_SIZE
                  value: "107374182400"
                - name: DISABLE_PROGRESS_BAR
                  value: "false"
                - name: ALLOW_EMPTY_BACKUPS
                  value: "true"
                - name: BACKUPS_TO_KEEP_LOCAL
                  value: {{ mul .Values.backup.backupKeep .Values.clickhouse.shardscount .Values.clickhouse.replicascount | default "" | quote }}
                - name: BACKUPS_TO_KEEP_REMOTE
                  value: {{ mul .Values.backup.backupKeep .Values.clickhouse.shardscount .Values.clickhouse.replicascount | default "" | quote }}

                - name: CLICKHOUSE_HOST
                  value: "localhost"
                - name: CLICKHOUSE_PORT
                  value: {{ .Values.clickhouse.ports.tcp | default "9000" | quote }}
                - name: CLICKHOUSE_USERNAME
                  value: {{ (index .Values.clickhouse.user 0).username | default "default" | quote }}
                - name: CLICKHOUSE_PASSWORD
                  value: {{ (index .Values.clickhouse.user 0).password | default "" | quote }}

                - name: S3_ACL
                  value: "private"
                - name: REMOTE_STORAGE
                  value: "s3"
                - name: S3_ENDPOINT
                  value: {{ .Values.backup.s3EndPoint }}
                - name: S3_BUCKET
                  value: {{ .Values.backup.s3Bucket }}
                - name: S3_PATH
                  value: {{ .Values.backup.s3Path }}
                - name: S3_ACCESS_KEY
                  value: {{ .Values.backup.s3AccessKey }}
                - name: S3_SECRET_KEY
                  value: {{ .Values.backup.s3SecretKey }}
                - name: S3_FORCE_PATH_STYLE
                  value: "true"
            {{- end }}
      - name: zookeeper-pod
        spec:
          # Run as a non-privileged user
          securityContext:
            runAsUser: 1000
            fsGroup: 1000
          affinity:
            podAntiAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
                - weight: 1
                  podAffinityTerm:
                    labelSelector:
                      matchExpressions:
                        - key: "clickhouse.radondb.com/zookeeper"
                          operator: In
                          values:
                            - {{ .Release.Name }}
                    topologyKey: "kubernetes.io/hostname"
          containers:
            - name: zookeeper
              image: {{ .Values.zookeeper.image }}
              imagePullPolicy: {{ .Values.zookeeper.imagePullPolicy }}
              volumeMounts:
                - name: zookeeper-data
                  mountPath: /var/lib/zookeeper
              resources:
                requests:
                  cpu: {{ .Values.zookeeper.resources.cpu }}
                  memory: {{ .Values.zookeeper.resources.memory }}
                limits:
                  cpu: {{ .Values.zookeeper.resources.cpu }}
                  memory: {{ .Values.zookeeper.resources.memory }}
              ports:
                - name: client
                  containerPort: {{ .Values.zookeeper.ports.client }}
                - name: server
                  containerPort: {{ .Values.zookeeper.ports.server }}
                - name: leader-election
                  containerPort: {{ .Values.zookeeper.ports.election }}
