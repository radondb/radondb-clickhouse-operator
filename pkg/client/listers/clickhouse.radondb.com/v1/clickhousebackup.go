/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/radondb/clickhouse-operator/pkg/apis/clickhouse.radondb.com/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClickHouseBackupLister helps list ClickHouseBackups.
// All objects returned here must be treated as read-only.
type ClickHouseBackupLister interface {
	// List lists all ClickHouseBackups in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ClickHouseBackup, err error)
	// ClickHouseBackups returns an object that can list and get ClickHouseBackups.
	ClickHouseBackups(namespace string) ClickHouseBackupNamespaceLister
	ClickHouseBackupListerExpansion
}

// clickHouseBackupLister implements the ClickHouseBackupLister interface.
type clickHouseBackupLister struct {
	indexer cache.Indexer
}

// NewClickHouseBackupLister returns a new ClickHouseBackupLister.
func NewClickHouseBackupLister(indexer cache.Indexer) ClickHouseBackupLister {
	return &clickHouseBackupLister{indexer: indexer}
}

// List lists all ClickHouseBackups in the indexer.
func (s *clickHouseBackupLister) List(selector labels.Selector) (ret []*v1.ClickHouseBackup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ClickHouseBackup))
	})
	return ret, err
}

// ClickHouseBackups returns an object that can list and get ClickHouseBackups.
func (s *clickHouseBackupLister) ClickHouseBackups(namespace string) ClickHouseBackupNamespaceLister {
	return clickHouseBackupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClickHouseBackupNamespaceLister helps list and get ClickHouseBackups.
// All objects returned here must be treated as read-only.
type ClickHouseBackupNamespaceLister interface {
	// List lists all ClickHouseBackups in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ClickHouseBackup, err error)
	// Get retrieves the ClickHouseBackup from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ClickHouseBackup, error)
	ClickHouseBackupNamespaceListerExpansion
}

// clickHouseBackupNamespaceLister implements the ClickHouseBackupNamespaceLister
// interface.
type clickHouseBackupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClickHouseBackups in the indexer for a given namespace.
func (s clickHouseBackupNamespaceLister) List(selector labels.Selector) (ret []*v1.ClickHouseBackup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ClickHouseBackup))
	})
	return ret, err
}

// Get retrieves the ClickHouseBackup from the indexer for a given namespace and name.
func (s clickHouseBackupNamespaceLister) Get(name string) (*v1.ClickHouseBackup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("clickhousebackup"), name)
	}
	return obj.(*v1.ClickHouseBackup), nil
}
